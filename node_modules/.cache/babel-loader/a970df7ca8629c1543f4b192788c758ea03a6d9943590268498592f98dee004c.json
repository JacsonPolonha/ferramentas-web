{"ast":null,"code":"\n\n// import React, { useEffect, useState } from \"react\";\n// import styled from \"styled-components\";\n// import ToolCard from \"../components/ToolCard\";\n\n// const CardsGrid = styled.main`\n//   display: grid;\n//   grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n//   gap: 16px;\n//   padding: 20px;\n\n//   @media (min-width: 600px) {\n//     grid-template-columns: repeat(2, 1fr);\n//   }\n\n//   @media (min-width: 900px) {\n//     grid-template-columns: repeat(3, 1fr);\n//   }\n\n//   @media (min-width: 1200px) {\n//     grid-template-columns: repeat(4, 1fr);\n//   }\n// `;\n\n// function Home({ selectedCategory, searchText }) {\n//   const [tools, setTools] = useState([]);\n\n//   useEffect(() => {\n//     fetch(\"/db.json\")\n//       .then((response) => response.json())\n//       .then((data) => setTools(data))\n//       .catch((error) => console.error(\"Erro ao carregar as ferramentas:\", error));\n//   }, []);\n\n//   const filteredTools = tools.filter((tool) => {\n//     const matchCategory =\n//       selectedCategory === \"Todas\" || tool.category === selectedCategory;\n\n//     const matchSearch =\n//       tool.name.toLowerCase().includes(searchText.toLowerCase());\n\n//     return matchCategory && matchSearch;\n//   });\n\n//   return (\n//     <main>\n//       {filteredTools.map((tool) => (\n//         <ToolCard key={tool.id} tool={tool} />\n//       ))}\n\n//       {filteredTools.length === 0 && (\n//         <p>Nenhuma ferramenta encontrada com os filtros atuais.</p>\n//       )}\n//     </main>\n//   );\n// }\n\n// export default Home;","map":{"version":3,"names":[],"sources":["/home/jacson/ferramentas/src/pages/Home.js"],"sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useState } from \"react\";\n// import styled from \"styled-components\";\n// import ToolCard from \"../components/ToolCard\";\n\n// const CardsGrid = styled.main`\n//   display: grid;\n//   grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n//   gap: 16px;\n//   padding: 20px;\n\n//   @media (min-width: 600px) {\n//     grid-template-columns: repeat(2, 1fr);\n//   }\n\n//   @media (min-width: 900px) {\n//     grid-template-columns: repeat(3, 1fr);\n//   }\n\n//   @media (min-width: 1200px) {\n//     grid-template-columns: repeat(4, 1fr);\n//   }\n// `;\n\n// function Home({ selectedCategory, searchText }) {\n//   const [tools, setTools] = useState([]);\n\n//   useEffect(() => {\n//     fetch(\"/db.json\")\n//       .then((response) => response.json())\n//       .then((data) => setTools(data))\n//       .catch((error) => console.error(\"Erro ao carregar as ferramentas:\", error));\n//   }, []);\n\n//   const filteredTools = tools.filter((tool) => {\n//     const matchCategory =\n//       selectedCategory === \"Todas\" || tool.category === selectedCategory;\n\n//     const matchSearch =\n//       tool.name.toLowerCase().includes(searchText.toLowerCase());\n\n//     return matchCategory && matchSearch;\n//   });\n\n//   return (\n//     <main>\n//       {filteredTools.map((tool) => (\n//         <ToolCard key={tool.id} tool={tool} />\n//       ))}\n\n//       {filteredTools.length === 0 && (\n//         <p>Nenhuma ferramenta encontrada com os filtros atuais.</p>\n//       )}\n//     </main>\n//   );\n// }\n\n// export default Home;\n"],"mappings":";;AA0BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}