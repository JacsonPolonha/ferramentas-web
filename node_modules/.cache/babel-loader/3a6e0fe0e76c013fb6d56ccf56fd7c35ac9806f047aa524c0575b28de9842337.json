{"ast":null,"code":"var _jsxFileName = \"/home/jacson/ferramentas/src/pages/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport ToolCard from \"../components/ToolCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardsGrid = styled.main`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 16px;\n  padding: 20px;\n\n  @media (min-width: 600px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: 900px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n\n  @media (min-width: 1200px) {\n    grid-template-columns: repeat(4, 1fr);\n  }\n`;\n_c = CardsGrid;\nfunction Home({\n  selectedCategory,\n  searchText\n}) {\n  _s();\n  const [tools, setTools] = useState([]);\n  useEffect(() => {\n    fetch(\"/db.json\").then(response => response.json()).then(data => setTools(data)).catch(error => console.error(\"Erro ao carregar ferramentas:\", error));\n  }, []);\n  const filteredTools = tools.filter(tool => {\n    const matchCategory = selectedCategory === \"Todas\" || tool.category === selectedCategory;\n    const matchSearch = tool.name.toLowerCase().includes(searchText.toLowerCase());\n    return matchCategory && matchSearch;\n  });\n  return /*#__PURE__*/_jsxDEV(CardsGrid, {\n    children: [filteredTools.map(tool => /*#__PURE__*/_jsxDEV(ToolCard, {\n      tool: tool\n    }, tool.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)), filteredTools.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Nenhuma ferramenta encontrada com os filtros atuais.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"ivW+FsSYPS47fQO0rGj5tAdzZLs=\");\n_c2 = Home;\nexport default Home;\nvar _c, _c2;\n$RefreshReg$(_c, \"CardsGrid\");\n$RefreshReg$(_c2, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","styled","ToolCard","jsxDEV","_jsxDEV","CardsGrid","main","_c","Home","selectedCategory","searchText","_s","tools","setTools","fetch","then","response","json","data","catch","error","console","filteredTools","filter","tool","matchCategory","category","matchSearch","name","toLowerCase","includes","children","map","id","fileName","_jsxFileName","lineNumber","columnNumber","length","_c2","$RefreshReg$"],"sources":["/home/jacson/ferramentas/src/pages/Home.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport ToolCard from \"../components/ToolCard\";\n\nconst CardsGrid = styled.main`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 16px;\n  padding: 20px;\n\n  @media (min-width: 600px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: 900px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n\n  @media (min-width: 1200px) {\n    grid-template-columns: repeat(4, 1fr);\n  }\n`;\n\nfunction Home({ selectedCategory, searchText }) {\n  const [tools, setTools] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/db.json\")\n      .then((response) => response.json())\n      .then((data) => setTools(data))\n      .catch((error) => console.error(\"Erro ao carregar ferramentas:\", error));\n  }, []);\n\n  const filteredTools = tools.filter((tool) => {\n    const matchCategory =\n      selectedCategory === \"Todas\" || tool.category === selectedCategory;\n    const matchSearch = tool.name.toLowerCase().includes(searchText.toLowerCase());\n    return matchCategory && matchSearch;\n  });\n\n  return (\n    <CardsGrid>\n      {filteredTools.map((tool) => (\n        <ToolCard key={tool.id} tool={tool} />\n      ))}\n\n      {filteredTools.length === 0 && (\n        <p>Nenhuma ferramenta encontrada com os filtros atuais.</p>\n      )}\n    </CardsGrid>\n  );\n}\n\nexport default Home;\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,SAAS,GAAGJ,MAAM,CAACK,IAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAjBIF,SAAS;AAmBf,SAASG,IAAIA,CAAC;EAAEC,gBAAgB;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EAC9C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACde,KAAK,CAAC,UAAU,CAAC,CACdC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKL,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC9BC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC,CAAC;EAC5E,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,aAAa,GAAGV,KAAK,CAACW,MAAM,CAAEC,IAAI,IAAK;IAC3C,MAAMC,aAAa,GACjBhB,gBAAgB,KAAK,OAAO,IAAIe,IAAI,CAACE,QAAQ,KAAKjB,gBAAgB;IACpE,MAAMkB,WAAW,GAAGH,IAAI,CAACI,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACpB,UAAU,CAACmB,WAAW,CAAC,CAAC,CAAC;IAC9E,OAAOJ,aAAa,IAAIE,WAAW;EACrC,CAAC,CAAC;EAEF,oBACEvB,OAAA,CAACC,SAAS;IAAA0B,QAAA,GACPT,aAAa,CAACU,GAAG,CAAER,IAAI,iBACtBpB,OAAA,CAACF,QAAQ;MAAesB,IAAI,EAAEA;IAAK,GAApBA,IAAI,CAACS,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CACtC,CAAC,EAEDf,aAAa,CAACgB,MAAM,KAAK,CAAC,iBACzBlC,OAAA;MAAA2B,QAAA,EAAG;IAAoD;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC3D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEhB;AAAC1B,EAAA,CA5BQH,IAAI;AAAA+B,GAAA,GAAJ/B,IAAI;AA8Bb,eAAeA,IAAI;AAAC,IAAAD,EAAA,EAAAgC,GAAA;AAAAC,YAAA,CAAAjC,EAAA;AAAAiC,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}